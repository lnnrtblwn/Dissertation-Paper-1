w_VAR = solve(t(xfull) %*% xfull) %*% (t(xfull) %*% yfull)
y_VAR_pre = xfull %*% w_VAR
# bulding x_full_post
x_prepost = rbind(x_pre[((T0+1)-p_multi):T0,],
x_post[1:T1,])
lagx_post = x_prepost[(p_multi):(nrow(x_prepost)-1),]
for (i in (2:p_multi)) {
lagx_post = cbind(lagx_post, x_prepost[(p_multi + 1 - i):(nrow(x_prepost) - i),])
}
y_prepost = c(y_pre[((T0+1)-p_multi):T0],
rep(NA, T1))
lagy_post = y_prepost[p_multi:(length(y_prepost)-1)]
for (i in (1:(p_multi-1))) {
lagy_post = cbind(lagy_post, y_prepost[(p_multi - i):(length(y_prepost) - 1- i)])
}
xfull_post = cbind(lagy_post, lagx_post)
y_VAR_post = rep(NA, T1)
for (i in 1:(T1-1)) {
y_VAR_post[i] = as.matrix(cbind(1, xfull_post))[i, ] %*% w_VAR
# updating y in xfull_post
xfull_post[i + 1, 1] = y_VAR_post[i]
if (i + 2 <= T1 & p_multi >= 2){
xfull_post[i + 2, 2] = y_VAR_post[i]
}
if (i + 3 <= T1 & p_multi >= 3){
xfull_post[i + 3, 3] = y_VAR_post[i]
}
if (i + 4 <= T1 & p_multi >= 4){
xfull_post[i + 4, 3] = y_VAR_post[i]
}
}
# last period
y_VAR_post[T1] = as.matrix(cbind(1, xfull_post))[T1, ] %*% w_VAR
}
y_treat_VAR = as.data.frame(c(y_pre, y_post)) %>%
rename(y = c(1))
y_treat_VAR$y_hat = c(rep(NA, p_multi),
y_VAR_pre,
y_VAR_post)
y_var_forecast = y_treat_VAR %>%
slice(-c(1:T0)) %>%
mutate(y = y - post_effect)
# ggplot(y_var_forecast) +
#   aes(x = y_hat, y = y) +
#   geom_point(shape = "circle", size = 1.5, colour = "#112446") +
#   geom_smooth(span = 0.75, method = "lm") +
#   theme_minimal()
# matplot(ts(y_treat_VAR),
#         type = "l",
#         lty = 1,
#         lwd = 2,
#         main = "VAR",
#         xlab = "Time",
#         ylab = "Value")
# Export to ggplot
df_gg = y_treat_VAR %>%
gather() %>%
mutate(id = c(1:(T0+T1), 1:(T0+T1)))
plot = ggplot(df_gg) +
aes(x = id, y = value, colour = key) +
geom_line(linewidth = 1.0) +
scale_color_hue(direction = 1) +
theme_minimal() +
labs(title = "VAR Path",
subtitle = paste0("rho_u = ", round(rho_u,4), ", Donors = ", J,", rho_factor = ", rho_factor))+
theme(
plot.title = element_text(size = 15L,
hjust = 0.5),
plot.subtitle = element_text(size = 13L,
hjust = 0.5))
results[["Plots_VAR"]] = plot
results_VAR = c()
results_VAR["PRE_VAR_RMSPE"] = sqrt(mean((y_pre[(p_multi+1):T0] -  y_VAR_pre)^2))
results_VAR["PRE_VAR_BIAS"] = mean(y_VAR_pre- y_pre[(p_multi+1):T0])
results_VAR["PRE_VAR_VAR"] = mean((y_VAR_pre - mean(y_VAR_pre))^2)
results_VAR["POST_VAR_RMSFE"] = sqrt(mean(((y_post-post_effect) - y_VAR_post)^2))
results_VAR["POST_VAR_BIAS"] = mean(y_VAR_post - (y_post-post_effect))
results_VAR["POST_VAR_VAR"] = mean((y_VAR_post - mean(y_VAR_post))^2)
#results_VAR["MZ_REG"] = list(summary(lm(y ~ y_hat, data = y_var_forecast))$coefficients[,1])
results_VAR["MZ_REG"] = list(summary(lm(as.vector(y_post-post_effect) ~ as.vector(y_VAR_post)))$coefficients[,1])
results_VAR
# 00 PACKAGES AND WD ----
library(tidyverse)
library(gridExtra)
rm(list = ls())
if (Sys.info()[6] == "jctoe"){
setwd("C:/Promotion/SC_Paper/")
} else {
setwd("~/Diss/Topics/Synthetic Control/")
}
source("R-Scripts/Simulations/Functions/my_functions.R")
source("R-Scripts/Simulations/07 - VAR_simu_GDP.R")
#set.seed(052023)
# 01 DGP: FACTOR/VAR ----
## 01.1 Joint Settings ----
# Number of pre-and post-treatment periods
T0 = 100
T1 = 50
# Treatment Effect
post_effect = 10
# Lag for univariate and multivariate dynamic case
p = 2
p_uni = p
p_multi = p
## 01.2 FACTOR Settings ----
# AR-Term of Factors
rho_factor = 0
# AR-Term of Errors: rho_u =  runif(1, rho_u_left, rho_u_right)
rho_u = 0
# rho_u_left = 0.5
# rho_u_right = 0.95
# Factor-Intercept
alpha = 0*(1-rho_factor)
# Factor-Variance
var_factor = 1
# Error-Variance
var_u = 1
# Number of Factors
K = 2
# Group Distribution of Factors
group_distribution = list(
"lambda1" = c(1,0),
"lambda2" = c(0,1))
# Adding a Trend
c = 0
# Specify Treatment-unit. c(rnorm(1, mean = treat_inter, sd = 1), rnorm(J, mean = 0, sd = 1))
treat_inter = 0
## 01.3 VAR Settings ----
# Error-Variance
var_error_VAR = 1
# 02 SIMULATION ----
## 02.1 Settings ----
iter = 50
CV_share = .5
# J = 4
# Factor
# my_by = 5
# J_seq = c(5,10,15,20,25,30)
# #J_seq = c(5:20)
# simu_type = "Factor"
# dynamic = "no"
# VAR
my_by = 2
J_seq = c(2,4,6,8)
simu_type = "VAR"
dynamic = "yes"
results = data.frame(matrix(NA, nrow = iter*length(J_seq), ncol = 1)) %>%
rename(Donors = c(1))
plots_UNIDYN = list()
plots_REGOLS = list()
plots_MULTIDYN1 = list()
plots_MULTIDYN2 = list()
plots_MULTIDYN3 = list()
plots_VAR = list()
for (J in J_seq) {
for (i in 1:iter) {
ID = (((J - J_seq[1]) / my_by) * iter) + i
# ensure this is not overwritten for each J
result_prelim = simulation_factor(J, simu_type = simu_type)
results$Donors[ID] = J
results$bound_check[ID] = result_prelim$bound_check
results$rho_factor[ID] = result_prelim$rho_factor
results$rho_error[ID] = result_prelim$rho_error
results$l1[ID] = result_prelim$REGOLS[7] # Ridge
results$l2[ID] = result_prelim$REGOLS[8] # Inverse Ridge
results$PRE_SC_RMSPE[ID] = result_prelim$SC[1]
results$PRE_SC_BIAS[ID] = result_prelim$SC[2]
results$PRE_SC_VAR[ID] = result_prelim$SC[3]
results$POST_SC_RMSFE[ID] = result_prelim$SC[4]
results$POST_SC_BIAS[ID] = result_prelim$SC[5]
results$POST_SC_VAR[ID] = result_prelim$SC[6]
results$SC_MZ_REG_inter[ID] = unlist(result_prelim$SC[7])[1]
results$SC_MZ_REG_slope[ID] = unlist(result_prelim$SC[7])[2]
results$PRE_OLS_RMSPE[ID] = result_prelim$OLS[1]
results$PRE_OLS_BIAS[ID] = result_prelim$OLS[2]
results$PRE_OLS_VAR[ID] = result_prelim$OLS[3]
results$POST_OLS_RMSFE[ID] = result_prelim$OLS[4]
results$POST_OLS_BIAS[ID] = result_prelim$OLS[5]
results$POST_OLS_VAR[ID] = result_prelim$OLS[6]
results$OLS_MZ_REG_inter[ID] = unlist(result_prelim$OLS[7])[1]
results$OLS_MZ_REG_slope[ID] = unlist(result_prelim$OLS[7])[2]
results$PRE_REGOLS_RMSPE[ID] = result_prelim$REGOLS[1]
results$PRE_REGOLS_BIAS[ID] = result_prelim$REGOLS[2]
results$PRE_REGOLS_VAR[ID] = result_prelim$REGOLS[3]
results$POST_REGOLS_RMSFE[ID] = result_prelim$REGOLS[4]
results$POST_REGOLS_BIAS[ID] = result_prelim$REGOLS[5]
results$POST_REGOLS_VAR[ID] = result_prelim$REGOLS[6]
results$REGOLS_MZ_REG_inter[ID] = unlist(result_prelim$REGOLS[9])[1]
results$REGOLS_MZ_REG_slope[ID] = unlist(result_prelim$REGOLS[9])[2]
results$PRE_NET_RMSPE[ID] = result_prelim$NET[1]
results$PRE_NET_BIAS[ID] = result_prelim$NET[2]
results$PRE_NET_VAR[ID] = result_prelim$NET[3]
results$POST_NET_RMSFE[ID] = result_prelim$NET[4]
results$POST_NET_BIAS[ID] = result_prelim$NET[5]
results$POST_NET_VAR[ID] = result_prelim$NET[6]
results$NET_MZ_REG_inter[ID] = unlist(result_prelim$NET[7])[1]
results$NET_MZ_REG_slope[ID] = unlist(result_prelim$NET[7])[2]
results$PRE_FACTOR_RMSPE[ID] = result_prelim$FACTOR[1]
results$PRE_FACTOR_BIAS[ID] = result_prelim$FACTOR[2]
results$PRE_FACTOR_VAR[ID] = result_prelim$FACTOR[3]
results$POST_FACTOR_RMSFE[ID] = result_prelim$FACTOR[4]
results$POST_FACTOR_BIAS[ID] = result_prelim$FACTOR[5]
results$POST_FACTOR_VAR[ID] = result_prelim$FACTOR[6]
results$FACTOR_MZ_REG_inter[ID] = unlist(result_prelim$FACTOR[7])[1]
results$FACTOR_MZ_REG_slope[ID] = unlist(result_prelim$FACTOR[7])[2]
if (dynamic == "yes"){
results$PRE_UNIDYN_RMSPE[ID] = result_prelim$UNIDYN[1]
results$PRE_UNIDYN_BIAS[ID] = result_prelim$UNIDYN[2]
results$PRE_UNIDYN_VAR[ID] = result_prelim$UNIDYN[3]
results$POST_UNIDYN_RMSFE[ID] = result_prelim$UNIDYN[4]
results$POST_UNIDYN_BIAS[ID] = result_prelim$UNIDYN[5]
results$POST_UNIDYN_VAR[ID] = result_prelim$UNIDYN[6]
results$UNIDYN_MZ_REG_inter[ID] = unlist(result_prelim$UNIDYN[7])[1]
results$UNIDYN_MZ_REG_slope[ID] = unlist(result_prelim$UNIDYN[7])[2]
results$PRE_MULTIDYN1_RMSPE[ID] = result_prelim$MULTIDYN1[1]
results$PRE_MULTIDYN1_BIAS[ID] = result_prelim$MULTIDYN1[2]
results$PRE_MULTIDYN1_VAR[ID] = result_prelim$MULTIDYN1[3]
results$POST_MULTIDYN1_RMSFE[ID] = result_prelim$MULTIDYN1[4]
results$POST_MULTIDYN1_BIAS[ID] = result_prelim$MULTIDYN1[5]
results$POST_MULTIDYN1_VAR[ID] = result_prelim$MULTIDYN1[6]
results$MULTIDYN1_MZ_REG_inter[ID] = unlist(result_prelim$MULTIDYN1[7])[1]
results$MULTIDYN1_MZ_REG_slope[ID] = unlist(result_prelim$MULTIDYN1[7])[2]
results$PRE_MULTIDYN2_RMSPE[ID] = result_prelim$MULTIDYN2[1]
results$PRE_MULTIDYN2_BIAS[ID] = result_prelim$MULTIDYN2[2]
results$PRE_MULTIDYN2_VAR[ID] = result_prelim$MULTIDYN2[3]
results$POST_MULTIDYN2_RMSFE[ID] = result_prelim$MULTIDYN2[4]
results$POST_MULTIDYN2_BIAS[ID] = result_prelim$MULTIDYN2[5]
results$POST_MULTIDYN2_VAR[ID] = result_prelim$MULTIDYN2[6]
results$MULTIDYN2_MZ_REG_inter[ID] = unlist(result_prelim$MULTIDYN2[7])[1]
results$MULTIDYN2_MZ_REG_slope[ID] = unlist(result_prelim$MULTIDYN2[7])[2]
results$PRE_MULTIDYN3_RMSPE[ID] = result_prelim$MULTIDYN3[1]
results$PRE_MULTIDYN3_BIAS[ID] = result_prelim$MULTIDYN3[2]
results$PRE_MULTIDYN3_VAR[ID] = result_prelim$MULTIDYN3[3]
results$POST_MULTIDYN3_RMSFE[ID] = result_prelim$MULTIDYN3[4]
results$POST_MULTIDYN3_BIAS[ID] = result_prelim$MULTIDYN3[5]
results$POST_MULTIDYN3_VAR[ID] = result_prelim$MULTIDYN3[6]
results$MULTIDYN3_MZ_REG_inter[ID] = unlist(result_prelim$MULTIDYN3[7])[1]
results$MULTIDYN3_MZ_REG_slope[ID] = unlist(result_prelim$MULTIDYN3[7])[2]
results$PRE_VAR_RMSPE[ID] = result_prelim$VAR[1]
results$PRE_VAR_BIAS[ID] = result_prelim$VAR[2]
results$PRE_VAR_VAR[ID] = result_prelim$VAR[3]
results$POST_VAR_RMSFE[ID] = result_prelim$VAR[4]
results$POST_VAR_BIAS[ID] = result_prelim$VAR[5]
results$POST_VAR_VAR[ID] = result_prelim$VAR[6]
results$VAR_MZ_REG_inter[ID] = unlist(result_prelim$VAR[7])[1]
results$VAR_MZ_REG_slope[ID] = unlist(result_prelim$VAR[7])[2]
plots_REGOLS[[ID]] = result_prelim$Plots_REGOLS
plots_UNIDYN[[ID]] = result_prelim$Plots_UNIDYN
plots_MULTIDYN1[[ID]] = result_prelim$Plots_MULTIDYN1
plots_MULTIDYN2[[ID]] = result_prelim$Plots_MULTIDYN2
plots_MULTIDYN3[[ID]] = result_prelim$Plots_MULTIDYN3
plots_VAR[[ID]] = result_prelim$Plots_VAR
}
rm(result_prelim)
svMisc::progress(ID, nrow(results))
}
}
results
results %>%
mutate_all(as.numeric) %>%
dplyr::select(Donors,
starts_with("POST")) %>%
dplyr::select(Donors,
ends_with("RMSFE")) %>%
group_by(Donors) %>%
summarise_all(.funs = list(mean = ~mean(., na.rm = TRUE)))
results_mean = results %>%
mutate_all(as.numeric) %>%
dplyr::select(Donors,
starts_with("POST")) %>%
dplyr::select(Donors,
ends_with("RMSFE")) %>%
group_by(Donors) %>%
summarise_all(.funs = list(mean = ~mean(., na.rm = TRUE)))
t(round(results_mean,2))
results_mean = results %>%
mutate_all(as.numeric) %>%
dplyr::select(Donors,
ends_with("slope")) %>%
group_by(Donors) %>%
summarise_all(.funs = list(mean = ~mean(., na.rm = TRUE)))
t(round(results_mean,2))
View(results)
write.csv(results)
write.csv2(results)
results
View(results)
results %>%
mutate_all(as.numeric) %>%
dplyr::select(Donors,
starts_with("MULTIDYN3"))
results %>%
mutate_all(as.numeric) %>%
dplyr::select(Donors,
starts_with("POST_MULTIDYN3"))
testJT =results %>%
mutate_all(as.numeric) %>%
dplyr::select(Donors,
starts_with("MULTIDYN3"))
View(testJT)
test_JTresults %>%
mutate_all(as.numeric) %>%
dplyr::select(Donors,
starts_with("POST_MULTIDYN3"))
test_JT = results %>%
mutate_all(as.numeric) %>%
dplyr::select(Donors,
starts_with("POST_MULTIDYN3"))
View(test_JT)
results2 = results
results[-148,]
results3=results[-148,]
View(results3)
test_JT = results3 %>%
mutate_all(as.numeric) %>%
dplyr::select(Donors,
starts_with("POST_MULTIDYN3"))
View(test_JT)
results = results[-148,]
results_mean = results3 %>%
mutate_all(as.numeric) %>%
dplyr::select(Donors,
starts_with("POST")) %>%
dplyr::select(Donors,
ends_with("RMSFE")) %>%
group_by(Donors) %>%
summarise_all(.funs = list(mean = ~mean(., na.rm = TRUE)))
t(round(results_mean,2))
test_JT = results3 %>%
mutate_all(as.numeric) %>%
dplyr::select(Donors,
starts_with("POST_VAR_"))
View(test_JT)
results3 = results3[-175,]
results3 = results3[-142,]
results_mean = results3 %>%
mutate_all(as.numeric) %>%
dplyr::select(Donors,
starts_with("POST")) %>%
dplyr::select(Donors,
ends_with("RMSFE")) %>%
group_by(Donors) %>%
summarise_all(.funs = list(mean = ~mean(., na.rm = TRUE)))
t(round(results_mean,2))
test_JT = results3 %>%
mutate_all(as.numeric) %>%
dplyr::select(Donors,
starts_with("POST_VAR_"))
results3 = results3[-175,]
test_JT = results3 %>%
mutate_all(as.numeric) %>%
dplyr::select(Donors,
starts_with("POST_VAR_"))
results3[-175,]
results4=results3[-175,]
test_JT = results4 %>%
mutate_all(as.numeric) %>%
dplyr::select(Donors,
starts_with("POST_VAR_"))
results4
results = results2
res = results2[-175,]
res1 = res[-148,]
res2 = res[-142,]
res2 = res1[-142,]
results_mean = res2 %>%
mutate_all(as.numeric) %>%
dplyr::select(Donors,
starts_with("POST")) %>%
dplyr::select(Donors,
ends_with("RMSFE")) %>%
group_by(Donors) %>%
summarise_all(.funs = list(mean = ~mean(., na.rm = TRUE)))
t(round(results_mean,2))
results_mean = res2 %>%
mutate_all(as.numeric) %>%
dplyr::select(Donors,
starts_with("POST")) %>%
dplyr::select(Donors,
ends_with("BIAS")) %>%
group_by(Donors) %>%
summarise_all(.funs = list(mean = ~mean(., na.rm = TRUE)))
t(round(results_mean,2))
results_mean = results %>%
mutate_all(as.numeric) %>%
dplyr::select(Donors,
ends_with("slope")) %>%
group_by(Donors) %>%
summarise_all(.funs = list(abs_mean = ~mean(abs(.), na.rm = TRUE)))
# summarise_at(.vars = dplyr::vars(SC_MZ_REG_slope:VAR_MZ_REG_slope),
#              .funs = list(mean = ~median(., na.rm = TRUE)))
t(round(results_mean,2))
results_mean = res2 %>%
mutate_all(as.numeric) %>%
dplyr::select(Donors,
starts_with("POST")) %>%
dplyr::select(Donors,
ends_with("BIAS")) %>%
group_by(Donors) %>%
summarise_all(.funs = list(abs_mean = ~mean(abs(.), na.rm = TRUE)))
t(round(results_mean,2))
results_mean = res2 %>%
mutate_all(as.numeric) %>%
dplyr::select(Donors,
ends_with("slope")) %>%
group_by(Donors) %>%
summarise_all(.funs = list(mean = ~mean(., na.rm = TRUE)))
# summarise_at(.vars = dplyr::vars(SC_MZ_REG_slope:VAR_MZ_REG_slope),
#              .funs = list(mean = ~median(., na.rm = TRUE)))
t(round(results_mean,2))
results_mean = res2 %>%
mutate_all(as.numeric) %>%
dplyr::select(Donors,
ends_with("inter")) %>%
group_by(Donors) %>%
summarise_all(.funs = list(mean = ~mean(., na.rm = TRUE)))
# summarise_at(.vars = dplyr::vars(SC_MZ_REG_slope:VAR_MZ_REG_slope),
#              .funs = list(mean = ~median(., na.rm = TRUE)))
t(round(results_mean,2))
write_excel_csv(res2)
write_excel_csv(res2, "Results.xlsx")
getwd()
write_csv(res2, "Results.xlsx")
write_csv(res2, "Results.csv")
write_csv2(res2, "Results.csv")
write_csv2(res2, "Results.csv")
res2
results
write_csv2(results, "Results.csv")
write_csv2(results2, "Results.csv")
View(results2)
slope = res2 %>%
mutate_all(as.numeric) %>%
dplyr::select(Donors,
ends_with("slope"))
View(slope)
boxplot(slope)
boxplot(slope$VAR_MZ_REG_slope)
y_post-post_effect
# 00 PACKAGES AND WD ----
library(tidyverse)
library(gridExtra)
rm(list = ls())
if (Sys.info()[6] == "jctoe"){
setwd("C:/Promotion/SC_Paper/")
} else {
setwd("~/Diss/Topics/Synthetic Control/")
}
source("R-Scripts/Simulations/Functions/my_functions.R")
source("R-Scripts/Simulations/07 - VAR_simu_GDP.R")
#set.seed(052023)
# 01 DGP: FACTOR/VAR ----
## 01.1 Joint Settings ----
# Number of pre-and post-treatment periods
T0 = 50
T1 = 20
# Treatment Effect
post_effect = 10
# Lag for univariate and multivariate dynamic case
p = 2
p_uni = p
p_multi = p
## 01.2 FACTOR Settings ----
# AR-Term of Factors
rho_factor = 0
# AR-Term of Errors: rho_u =  runif(1, rho_u_left, rho_u_right)
rho_u = 0
# rho_u_left = 0.5
# rho_u_right = 0.95
# Factor-Intercept
alpha = 0*(1-rho_factor)
# Factor-Variance
var_factor = 1
# Error-Variance
var_u = 1
# Number of Factors
K = 2
# Group Distribution of Factors
group_distribution = list(
"lambda1" = c(1,0),
"lambda2" = c(0,1))
# Adding a Trend
c = 0
# Specify Treatment-unit. c(rnorm(1, mean = treat_inter, sd = 1), rnorm(J, mean = 0, sd = 1))
treat_inter = 0
## 01.3 VAR Settings ----
# Error-Variance
var_error_VAR = 1
# 02 SIMULATION ----
## 02.1 Settings ----
iter = 10
CV_share = .5
# J = 4
# Factor
# my_by = 5
# J_seq = c(5,10,15,20,25,30)
# #J_seq = c(5:20)
# simu_type = "Factor"
# dynamic = "no"
# VAR
my_by = 2
J_seq = c(2,4,6,8)
simu_type = "VAR"
dynamic = "yes"
results = data.frame(matrix(NA, nrow = iter*length(J_seq), ncol = 1)) %>%
rename(Donors = c(1))
plots_UNIDYN = list()
plots_REGOLS = list()
plots_MULTIDYN1 = list()
plots_MULTIDYN2 = list()
plots_MULTIDYN3 = list()
plots_VAR = list()
